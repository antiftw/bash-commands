#!/bin/bash

COMMAND_ADD_CONFIG_FILE="apt-cmd-add.conf"

exit_error() {
    # print errpr message 
    printf "\n\033[0;31mERROR:\033[0m $1\n\n" >&2
    exit 1
}

print_output() {
  printf "\n%s\n" "$1"
}

# Print commands from array with a newline between each command
# Parameter $1 : Array of commands
print_commands() {
    for COMMAND in "${@}"; do
        printf "  %s\n" "$COMMAND"
    done
}

for arg in "$@"; do
    case "$arg" in
        -h|--help)
            echo ""
            echo "This script can be used to add the apt commands to your system"
            echo "First make sure that you have configured which commands you want to add, by editing the add-cmd-key.conf file"
            echo "Usage: ./add-cmd-key [-i=<install-path> ]"
            echo "  -i, --install-path=<path>  The path where the commands will be installed (default: /usr/local/bin)"
            echo ""
            echo "  -f --force                 Force overwrite of existing commands"
            echo ""
            echo "  -h, --help                 Show this help message"
            echo ""
            echo "  -v(v), --v(v)erbose            Verbose output, allowed values: 0, 1, 2:"
            echo "                                  - 0 - no verbose output (default)"
            echo "                                  - 1 - verbose output (-v) (show main steps)"
            echo "                                  - 2 - extra verbose output (-vv) (dump variables)"
            echo ""
            echo "  -w, --write-config         Write config file with all commands"
            echo "                             (reads the commands from the commands/ directory)"                         
            echo ""
            exit 0
            ;;
        -f|--force)
            FORCE=true
            ;;
        -i=*|--install-path=*)
            INSTALL_PATH="${arg#*=}"
            ;;
        -l=*|--logfile=*)
            CUSTOM_LOGFILE="${arg#*=}"
            ;;
        -v|--verbose)
            VERBOSE=1
            ;;
        -vv|--vverbose)
            VERBOSE=2
            ;;
        -w|--write-config)
            WRITE_CONFIG=true
            ;;
    esac
done

# Set default values
FORCE=${FORCE:-false}
VERBOSE=${VERBOSE:-0}

# Check if script is run as root
if [ "$(id -u)" != "0" ]; then
    exit_error "must run as root"
fi

# Write config file if requested, by listing all commands in commands/ and writing them to the config file
if [ "$WRITE_CONFIG" = true ]; then
    # If config file already exists and force is not true, ask if we want to overwrite it
    if [ -f "$COMMAND_ADD_CONFIG_FILE" ]; then
        if [ "$FORCE" = false ]; then
            read -p "Config file already exists, do you want to overwrite it? (y/n) " -n 1 -r
            echo ""
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                exit 0
            fi
        fi
        echo "# Configuration file for apt-scr-add script" > "$COMMAND_ADD_CONFIG_FILE"
        echo "# Commands to add to distro" >> "$COMMAND_ADD_CONFIG_FILE"
        echo "# Format: <command>=<true|false>" >> "$COMMAND_ADD_CONFIG_FILE"
    else
        # Create config file
        touch "$COMMAND_ADD_CONFIG_FILE"
    fi    
    
    # Write commands to config file
    for COMMAND in commands/*; do
        # Ignore directories
        if [ -d "$COMMAND" ]; then
            continue
        fi

        # Strip commands/ from command
        COMMAND=${COMMAND#commands/}

        # Write command to config file
        echo "$COMMAND=true" >> "$COMMAND_ADD_CONFIG_FILE"
    done
    
    # Exit script
    exit 0
fi




declare -a COMMANDS=()

# Read config file
if [ -f "$COMMAND_ADD_CONFIG_FILE" ]
then  readarray -t COMMANDS < "$COMMAND_ADD_CONFIG_FILE"
else  exit_error "config file not found"
fi

INSTALL_PATH=${INSTALL_PATH:-"/usr/local/bin"}

if [ "$VERBOSE" -ge 2 ]; then
  print_output "VERBOSE: $VERBOSE"
  print_output "FORCE: $FORCE"
  print_output "INSTALL_PATH: $INSTALL_PATH"
fi

# Create install path if it does not exist
if [ ! -d "$INSTALL_PATH" ]; then
    mkdir -p "$INSTALL_PATH"
fi
declare -a COMMANDS_SKIPPED=()
declare -a COMMANDS_INSTALLED=()

# Loop through commands
for COMMAND in "${COMMANDS[@]}"
do
    # Ignore rule if it starts with #
    if [[ "$COMMAND" == \#* ]]; then
        continue
    fi

    # Ignore empty lines
    if [ -z "$COMMAND" ]; then
        continue
    fi
    # command is of format <command>=<boolean>
    # Split command seperated by =
    COMMAND_NAME=$(echo "$COMMAND" | cut -d'=' -f1)
    BOOLEAN=$(echo "$COMMAND" | cut -d'=' -f2)
    
    # Check if we should install command
    if [ ! "$BOOLEAN" ]; then
        continue
    fi

    # Check if command is already installed
    if [ -f "$INSTALL_PATH/$COMMAND_NAME" ] && [ "$FORCE" == false ]; then
        print_output "Command $COMMAND_NAME already exists, use -f to force overwrite"
        COMMANDS_SKIPPED+=("$COMMAND_NAME")
        continue
    fi

    # Copy command to install path
    cp "$PWD/commands/$COMMAND_NAME" "$INSTALL_PATH/$COMMAND_NAME";
    if [ $? -eq 0 ]; then
        chmod a+x "$INSTALL_PATH/$COMMAND_NAME"
        COMMANDS_INSTALLED+=("$COMMAND_NAME")
    fi
done

# Print skipped commands
if [ "$VERBOSE" -ge 1 ] && [ ${#COMMANDS_SKIPPED[@]} -gt 0 ]; then
    print_output "Skipped commands:"
    print_commands "${COMMANDS_SKIPPED[@]}"
fi

# Print installed commands
if [ "$VERBOSE" -ge 1 ] && [ ${#COMMANDS_INSTALLED[@]} -gt 0 ]; then
    print_output "Installed commands:"
    print_commands "${COMMANDS_INSTALLED[@]}"
fi
